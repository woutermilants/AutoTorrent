package parser;

import Logging.DefaultTomcatLogger;
import data.consts;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Created by Wouter
 */
public class MagnetParser extends HttpServlet {

    DefaultTomcatLogger logger = new DefaultTomcatLogger();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        String type = req.getParameter("type");
        String param = req.getParameter("param");

        executeScript(type, param);
    }

    private void executeScript(String type, String param) {

        Process p = null;

        try {
            logger.writeInfoToLog("parameter received : " + param);

            if (consts.MAGNET.equals(type)) {
                p = Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "/home/wouter/magnet.sh \"" + param + "\""});
            } else if (consts.ADDSHOW.equals(type)) {
                p = Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "/home/wouter/addshow.sh \"" + param + "\""});
                TorrentParser.getInstance().triggerPirateBayParser();
            } else if (consts.REMOVESHOW.equals(type)) {
                p = Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "/home/wouter/removeshow.sh \"" + param + "\""});
            } else {
                logger.writeErrorToLog("wrong param type received : " + type);
                throw new Exception("Received parameter type unknown");
            }

            p.waitFor();

            BufferedReader stdInput = new BufferedReader(new
                    InputStreamReader(p.getInputStream()));

            BufferedReader stdError = new BufferedReader(new
                    InputStreamReader(p.getErrorStream()));

            // read the output from the command
            String s = null;
            while ((s = stdInput.readLine()) != null) {
                System.out.println(s);
            }

            // read any errors from the attempted command
            while ((s = stdError.readLine()) != null) {
                System.out.println(s);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
