package parser;

/**
 * Created By Wouter
 */

import Logging.DefaultTomcatLogger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.http.HttpServlet;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.*;

public class TorrentParser extends HttpServlet implements ServletContextListener {

    static org.w3c.dom.Element rootElement;
    Collection<String> pbLinks = new ArrayList<String>();
    DefaultTomcatLogger logger = new DefaultTomcatLogger();
    static TimerTask timedTask;

    private static TorrentParser _instance;

    public static TorrentParser getInstance() {
        return _instance;
    }

    //Executed on server startup
    @Override
    public void contextInitialized(ServletContextEvent servletContextEvent) {

        _instance = this;
        Timer timer = new Timer();
        timedTask = new TimerTask() {

            @Override
            public void run() {
                parsePirateBay();

            }
        };

        // schedule the task to run starting now and then every x seconds
        timer.schedule(timedTask, 0l, 1000 * 60 * 30);     //30 minutes

    }

    private void parsePirateBay() {
        //createXmlFile();
        final PirateParser parser = new PirateParser();
        Collection<String> tvShows = loadTvShowList();

        org.w3c.dom.Document xmlDoc = null;
        for (String tvShow : tvShows) {
            logger.writeInfoToLog("STARTED loading torrents for: " + tvShow.toUpperCase());
            xmlDoc = parser.parseTorrent(tvShow, 100, "tv-show");
            logger.writeInfoToLog("FINISHED loading torrents for: " + tvShow.toUpperCase() + "\n");
        }

        try {
            writeToXml(xmlDoc);
            logger.writeInfoToLog("--- FINISHED writing results to XML file --- \n");
        } catch (TransformerException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void contextDestroyed(ServletContextEvent servletContextEvent) {
        logger.writeInfoToLog("TOMCAT SERVER IS SHUTTING DOWN");
    }

    private void writeToXml(org.w3c.dom.Document doc) throws TransformerException {
        // write the content into xml file
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource source = new DOMSource(doc);

        //final String currentPath = getServletConfig().getServletContext().getRealPath("/");
        StreamResult result = new StreamResult(new File("webapps/torrentgen/results/tvshows.xml"));

        transformer.transform(source, result);
    }

    private String getTimeStamp() {
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
        return sdf.format(date);
    }

    private Collection<String> loadTvShowList() {

        logger.writeInfoToLog("LOADING TV-SHOWS...");
        ArrayList<String> tvShows = new ArrayList<String>();
        try {

            File fXmlFile = new File("webapps/config/Tv-Shows.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            org.w3c.dom.Document doc = dBuilder.parse(fXmlFile);

            doc.getDocumentElement().normalize();

            NodeList nList = doc.getElementsByTagName("shows");

            for (int i = 0; i < nList.getLength(); i++) {

                Node nNode = nList.item(i);

                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    org.w3c.dom.Element eElement = (org.w3c.dom.Element) nNode;
                    NodeList showList = eElement.getElementsByTagName("show");
                    for (int j = 0; j < showList.getLength(); j++) {
                        String currentShow = eElement.getElementsByTagName("show").item(j).getTextContent();
                        logger.writeInfoToLog("Tv-Show : " + currentShow.toUpperCase());
                        tvShows.add(currentShow);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        logger.writeInfoToLog("FINISHED LOADING TV-SHOWS \n");

        return tvShows;
    }

    private void loadSettings() {
        logger.writeInfoToLog("LOADING SETTINGS...");
    }

    public void triggerPirateBayParser() {
        parsePirateBay();
    }
}
