package parser;

/**
 * Created By Wouter
 */

import Logging.DefaultTomcatLogger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.http.HttpServlet;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.*;

public class TorrentParser extends HttpServlet implements ServletContextListener {

    static org.w3c.dom.Element rootElement;
    Collection<String> pbLinks = new ArrayList<String>();
    DefaultTomcatLogger logger = new DefaultTomcatLogger();

    //Executed on server startup
    @Override
    public void contextInitialized(ServletContextEvent servletContextEvent) {

        Timer timer = new Timer();

        TimerTask timedTask = new TimerTask() {

            @Override
            public void run() {
                //createXmlFile();
                final PirateParser parser = new PirateParser();
                Collection<String> tvShows = loadTvShowList();

                org.w3c.dom.Document xmlDoc = null;
                for (String tvShow : tvShows) {
                    logger.writeInfoToLog("STARTED loading torrents for: " + tvShow.toUpperCase());
                    xmlDoc = parser.parseTorrent(tvShow, 100, "tv-show");
                    logger.writeInfoToLog("FINISHED loading torrents for: " + tvShow.toUpperCase() + "\n");
                }

                try {
                    writeToXml(xmlDoc);
                    logger.writeInfoToLog("--- FINISHED writing results to XML file --- \n");
                } catch (TransformerException e) {
                    e.printStackTrace();
                }
            }
        };

        // schedule the task to run starting now and then every x seconds
        timer.schedule(timedTask, 0l, 1000 * 60 * 30);     //30 minutes

    }

    @Override
    public void contextDestroyed(ServletContextEvent servletContextEvent) {
        logger.writeInfoToLog("TOMCAT SERVER IS SHUTTING DOWN");
    }

    /*private void parseTorrent(Collection<String> pbLinks, String searchParam, int minimumSeeders, String searchType) {
        Document urlDoc;
        String activeUrl = "";
        for (String pburl : pbLinks) {
            try {
                if (Jsoup.connect(pburl).get() != null) {
                    activeUrl = pburl;
                    break;
                } else {
                    logger.writeErrorToLog("ERROR : Unable to connect to " + pburl);
                }
            } catch (MalformedURLException e) {
                logger.writeErrorToLog("Error connecting to host (MalformedURLException)");
            } catch (IOException e) {
                logger.writeErrorToLog(e.getMessage());
            }
        }

        if (activeUrl != null) {

            String searchTerm = null;
            if (searchType == "tv-show") {
                searchTerm = activeUrl + "/search/" + removeSpaces(searchParam) + "/0/7/208";
            } else if (searchType == "movie") {
                searchTerm = activeUrl + "/search/" + removeSpaces(searchParam) + "/0/7/207";
            }
            try {
                urlDoc = Jsoup.connect(searchTerm).get();

                // get all links
                Elements torrents = urlDoc.select("tr");
                for (Element torrent : torrents) {
                    Elements torrentdatas = torrent.select("td");

                    if (torrentdatas.size() >= 4) {
                        TorrentData torrentData = new TorrentData();
                        torrentData.setSeeders(Integer.parseInt(torrentdatas.get(2).text()));
                        if (torrentData.getSeeders() < minimumSeeders) {
                            break;
                        }
                        torrentData.setName(torrentdatas.get(1).getElementsByClass("detName").text());

                        for (Element link : torrentdatas.get(1).getElementsByAttribute("href")) {
                            if (link.attr("href").startsWith("magnet")) {
                                torrentData.setMagnet(link.attr("href"));
                            }
                        }
                        torrentData.setLeechers(Integer.parseInt(torrentdatas.get(3).text()));

                        // torrentName elements
                        org.w3c.dom.Element serieTag = xmlDoc.createElement("tv-show");
                        rootElement.appendChild(serieTag);

                        addDataToXml(searchParam, torrentData, serieTag);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            logger.writeErrorToLog("THERE ARE NO AVAILABLE TORRENT URL's");
        }
    }*/

    /*private void addDataToXml(String searchParam, TorrentData torrentData, org.w3c.dom.Element serieTag) {
        //Add name tag
        serieTag.setAttribute("name", searchParam);

        // torrentname elements
        org.w3c.dom.Element torrentname = xmlDoc.createElement("name");
        torrentname.appendChild(xmlDoc.createTextNode(torrentData.getName()));
        serieTag.appendChild(torrentname);

        // magnet elements
        org.w3c.dom.Element torrentmagnet = xmlDoc.createElement("magnet");
        torrentmagnet.appendChild(xmlDoc.createTextNode(torrentData.getMagnet()));
        serieTag.appendChild(torrentmagnet);

        // seeders elements
        org.w3c.dom.Element seeders = xmlDoc.createElement("seeders");
        seeders.appendChild(xmlDoc.createTextNode(Integer.toString(torrentData.getSeeders())));
        serieTag.appendChild(seeders);

        // leechers elements
        org.w3c.dom.Element leechers = xmlDoc.createElement("leechers");
        leechers.appendChild(xmlDoc.createTextNode(Integer.toString(torrentData.getLeechers())));
        serieTag.appendChild(leechers);
    }*/

    /*private static void createXmlFile() {
        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = null;
        try {
            docBuilder = docFactory.newDocumentBuilder();
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        org.w3c.dom.Element rootEl;
        if (docBuilder != null) {
            xmlDoc = docBuilder.newDocument();
            rootEl = xmlDoc.createElement("torrents");
            xmlDoc.appendChild(rootEl);
        } else {
            rootEl = null;
        }
        rootElement = rootEl;
    }*/

    /*private String removeSpaces(String searchParam) {
        return searchParam.replace(" ", "%20");
    }*/

    private void writeToXml(org.w3c.dom.Document doc) throws TransformerException {
        // write the content into xml file
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource source = new DOMSource(doc);

        //final String currentPath = getServletConfig().getServletContext().getRealPath("/");
        StreamResult result = new StreamResult(new File("webapps/torrentgen/results/tvshows.xml"));

        transformer.transform(source, result);
    }

    private String getTimeStamp() {
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
        return sdf.format(date);
    }

    private Collection<String> loadTvShowList() {

        logger.writeInfoToLog("LOADING TV-SHOWS...");
        ArrayList<String> tvShows = new ArrayList<String>();
        try {

            File fXmlFile = new File("webapps/Config/Tv-Shows.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            org.w3c.dom.Document doc = dBuilder.parse(fXmlFile);

            doc.getDocumentElement().normalize();

            NodeList nList = doc.getElementsByTagName("shows");

            for (int i = 0; i < nList.getLength(); i++) {

                Node nNode = nList.item(i);

                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    org.w3c.dom.Element eElement = (org.w3c.dom.Element) nNode;
                    NodeList showList = eElement.getElementsByTagName("show");
                    for (int j = 0; j < showList.getLength(); j++) {
                        String currentShow = eElement.getElementsByTagName("show").item(j).getTextContent();
                        logger.writeInfoToLog("Tv-Show : " + currentShow.toUpperCase());
                        tvShows.add(currentShow);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        logger.writeInfoToLog("FINISHED LOADING TV-SHOWS \n");

        return tvShows;
    }

    private void loadSettings() {
        logger.writeInfoToLog("LOADING SETTINGS...");
    }


}
